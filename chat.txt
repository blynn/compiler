= ChatFP =

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<div style="display:none;" id="Map.hs">
include::inn/Map1.hs[]
</div>

<style>
.ok{
font-family:monospace;
white-space: pre-wrap;
padding:1ex;
background-color:white;}
.convo{
overflow-wrap: break-word;
}
.hover_module{
background-color:yellow;
}
.current_module{
font-weight:bold;
}
.output{
font-family:monospace;
white-space: pre-wrap;
padding:1ex;
background-color:lightgrey;
}
.input::before{
display:flex;
content:"\3bb";
margin-left: 1ex;
margin-right: 1ex;
color:purple;
}
.input{
display:flex;
padding:1ex;
background-color:lightgrey;
}
</style>

<div>
<div id="modlist"></div>
<button onclick="newclick();">New</button>
</div>
<hr>

<div id="convo" class="convo"></div>

<textarea id="inbox" rows="4" style="width:100%;"></textarea>
<button onclick="interpret();">&#9654;</button>

<div id="errmsg" style="color:red;font-family:monospace;"></div>

<script>
"use strict";
const convo = document.getElementById("convo");
const inbox = document.getElementById("inbox");
const errmsg = document.getElementById("errmsg");

const module_saved = new Map();
let module_name;

const modlist = document.getElementById("modlist");
function modlist_refresh() {
  modlist.innerHTML = "";
  for (const k of module_saved.keys()) {
    const item = document.createElement("div");
    item.innerText = k + " ";
    if (k == module_name) {
      item.classList.add('current_module');
      const mv = document.createElement("span");
      mv.innerHTML = "&#x1F589;";
      mv.style.cursor = "default";
      mv.addEventListener("click", (event) => {
        const bak = item.innerHTML;
        item.innerHTML = "";
        const tb = document.createElement("input");
        tb.value = k;
        item.appendChild(tb);
        tb.focus();
        function mv_commit()  {
          if (tb.value != k) module_mv(tb.value);
          modlist_refresh();
        }
        item.addEventListener("keydown", (event) => {
          if (event.key == "Enter") tb.blur();  // Triggers focusout.
          else if (event.key == "Escape") item.innerHTML = bak;
        });
        item.addEventListener("focusout", (event) => { mv_commit(); });
      }, true);
      item.appendChild(mv);
    } else {
      item.addEventListener("click", (event) => {
        module_load(k);
        modlist_refresh();
      });
    }
    modlist.appendChild(item);
    item.addEventListener("mouseover", (event) => {
      item.classList.add('hover_module');
    });
    item.addEventListener("mouseout", (event) => {
      item.classList.remove('hover_module');
    });
  }
}
function newclick() {
  const pre = "NameMe";
  for(let i = 1;; i++) {
    const s = pre + i;
    if (!module_saved.has(s)) {
      module_new(s);
      break;
    }
  }
  modlist_refresh();
}

const repl = {};

function run(f, args, s) {
  repl.args = args;
  repl.buf = [];
  repl.out = [];
  repl.inp = teen(s);
  repl.cursor = 0;
  repl.eval_in = [], repl.eval_out = [];
  repl.instance.exports[f]();
  return {
    buf : repl.buf.map(tedea),
    out : tedea(repl.out),
  }
}

function teen(s) { return (new TextEncoder()).encode(s); }
function tede(s) { return (new TextDecoder()).decode(s); }
function tedea(a) { return (new TextDecoder()).decode(Uint8Array.from(a)); }

async function loadRepl() {
  try {
    repl.instance = (await WebAssembly.instantiateStreaming(fetch('doh.wasm'), {env:
      { putchar: c  => repl.out.push(c)
      , eof    : () => repl.cursor == repl.inp.length
      , getchar: () => repl.inp[repl.cursor++]
      , nextout: () => { repl.buf.push(repl.out); repl.out = []; }
      , argc   : () => repl.args.length
      , argvlen: i => repl.args[i].length
      , argvat : (i, j) => repl.args[i][j]

      , eval_put : c  => repl.eval_in.push(c)
      , eval_run : () => {
          repl.eval_out = teen(eval(tedea(repl.eval_in)));
          repl.eval_in = [];
        }
      , eval_size: () => repl.eval_out.length
      , eval_at:   i  => repl.eval_out[i]
      }})).instance;

module_name = "Map";
run("chat_new", [teen("Map")], "");
const maphs = document.getElementById("Map.hs").textContent;
const r = run("chat_module", [], maphs);
const ie = document.createElement("pre");
if (r.out == "") ie.classList.add('ok'); else console.log("error!", r.out);
ie.innerText = maphs;
convo.appendChild(ie);
module_saved.set("Map", convo.innerHTML);
module_new("Main");
modlist_refresh();
  } catch(err) {
    console.log(err);
  }
}

function interpret() {
  errmsg.innerText = "";
  const r = run("chat", [teen(module_name)], inbox.value);
  if (r.buf[0] == "error") {
    errmsg.innerText = r.out;
  } else {
    const ie = document.createElement("pre");
    ie.classList.add('ok');
    ie.innerText = inbox.value;
    convo.appendChild(ie);
    if (r.out != "") {
      const oe = document.createElement("div");
      oe.classList.add('output');
      oe.innerText = r.out;
      convo.appendChild(oe);
    }
    inbox.value = "";
  }
}
loadRepl();

function module_new(s) {
  run("chat_new", [teen(s)], "");
  module_saved.set(module_name, convo.innerHTML);
  module_saved.set(s, "");
  module_name = s;
  convo.innerHTML = "";
}

function module_load(s) {
  module_saved.set(module_name, convo.innerHTML);
  module_name = s;
  convo.innerHTML = module_saved.get(module_name);
}

function module_save() {
  module_saved.set(module_name, convo.innerHTML);
}

function module_mv(t) {
  run("chat_mv", [teen(module_name), teen(t)], "");
  module_saved.set(t, convo.innerHTML);
  module_saved.delete(module_name);
  module_name = t;
}
</script>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
